*-----------------------------------------------------------------------------
*
* To use a subcircuit, the name must begin with 'X'.  For example:
* X1 1 2 3 4 5 uA741
*
* connections:   non-inverting input
*                |  inverting input
*                |  |  positive power supply
*                |  |  |  negative power supply
*                |  |  |  |  output
*                |  |  |  |  |
.options savecurrents

.subckt uA741    1  2  3  4  5
*
  c1   11 12 8.661E-12
  c2    6  7 30.00E-12
  dc    5 53 dx
  de   54  5 dx
  dlp  90 91 dx
  dln  92 90 dx
  dp    4  3 dx
  egnd 99  0 poly(2) (3,0) (4,0) 0 .5 .5
  fb    7 99 poly(5) vb vc ve vlp vln 0 10.61E6 -10E6 10E6 10E6 -10E6
  ga    6  0 11 12 188.5E-6
  gcm   0  6 10 99 5.961E-9
  iee  10  4 dc 15.16E-6
  hlim 90  0 vlim 1K
  q1   11  2 13 qx
  q2   12  1 14 qx
  r2    6  9 100.0E3
  rc1   3 11 5.305E3
  rc2   3 12 5.305E3
  re1  13 10 1.836E3
  re2  14 10 1.836E3
  ree  10 99 13.19E6
  ro1   8  5 50
  ro2   7 99 100
  rp    3  4 18.16E3
  vb    9  0 dc 0
  vc    3 53 dc 1
  ve   54  4 dc 1
  vlim  7  8 dc 0
  vlp  91  0 dc 40
  vln   0 92 dc 40
.model dx D(Is=800.0E-18 Rs=1)
.model qx NPN(Is=800.0E-18 Bf=93.75)
.ends

.param xC2 = 1/(1/220n+1/220n+1/(1u+1u+1u))

Vcc vcc 0 5.0
Vee vee 0 -5.0
Vin in 0 0 ac 1.0 sin(0 10m 1k)


C1 in inv_in 220n

Vze inv_in teste 0

R1 teste 0 1k

X1 nr2 inv_in vcc vee out uA741
R2 nr2 0 1k
R5 nr2 aux 100k

R6 aux out 100k
R7 aux out 100k

R8 out outf 1k

*we tried to place all the capacitors used in series and in parallel but it leads to an unstable situation to Ngspice when trying to calculate the operating point. Thus, we solved this by simply calculating the equivalent capacitance in the parameter xC2
C2 outf 0 xC2

* load
*RL outf 0 1k


.op
.end

.control

print all


* frequency analysis
ac dec 1000 10 100MEG
hardcopy voutfreq.ps vdb(outf)
echo "voutfreq_FIG"

*input impedance in ohm
let zin = v(in)[2000]/i(Vze)[2000]
let rez = Re(zin)
let imz = Im(zin)
let abszin = abs(zin)

echo "zin_TAB"
echo "Zi = $&rez + ($&imz)j"
echo "|Zi| = $&abszin"
echo "zin_END"

meas ac maxgaindb MAX vdb(outf) from=10 to=10MEG

let cutoff = maxgaindb-3

meas ac flow WHEN vdb(outf)=cutoff
meas ac fhigh WHEN vdb(outf)=cutoff CROSS=LAST

let centralf = sqrt(flow*fhigh)

meas ac gaindb FIND vdb(outf) AT=centralf

let lineargain = 10^(gaindb/20)
print lineargain

let opampcost = 0.2 + 100 + 5.305 + 5.305 + 1.836 + 1.836 + 13190 + 0.05 + 0.1 + 18.16 +0.5
let cost = opampcost+3+300+3*0.220

let merit = 1/(0.000001+cost*abs(1000-centralf)*abs(100-lineargain))
let meritclean = 1/(0.000001+(cost-opampcost)*abs(1000-centralf)*abs(100-lineargain))

echo "cutoffsim_TAB"
print flow
print fhigh
echo "cutoffsim_END"

echo "values_TAB"
print centralf
print cost
print gaindb
print lineargain
print merit
print meritclean
echo "values_END"

.endc 
